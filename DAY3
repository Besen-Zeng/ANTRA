-- 1.      How many products can you find in the Production.Product table?
SELECT COUNT(*) AS Count
FROM Production.Product
-- 2.      Write a query that retrieves the number of products in the 
-- Production.Product table that are included in a subcategory. 
-- The rows that have NULL in column ProductSubcategoryID are 
-- considered to not be a part of any subcategory.
SELECT COUNT(*) AS NOSubcategory
FROM Production.Product 
WHERE ProductSubcategoryID IS NOT NULL

SELECT * FROM Production.Product
-- 3.      How many Products reside in each SubCategory? 
-- Write a query to display the results with the following titles.

-- ProductSubcategoryID CountedProducts
SELECT ProductSubcategoryID, COUNT(*) AS CountedPRoducts
FROM Production.Product
GROUP BY ProductSubcategoryID
-- -------------------- ---------------
-- 4.      How many products that do not have a product subcategory.
SELECT COUNT(*) AS ProductSubcategory
FROM PRoduction.Product
WHERE ProductSubcategoryID IS NULL

-- 5.      Write a query to list the sum of products quantity in the Production.ProductInventory table.
SELECT SUM(Quantity) AS SUM
FROM Production.ProductInventory


-- 6.    Write a query to list the sum of products in the Production.
-- ProductInventory table and LocationID set to 40 and limit the result to include just 
-- summarized quantities less than 100.
SELECT ProductID , SUM(Quantity) AS TheSum
FROM Production.ProductInventory
WHERE LocationID = 40
GROUP BY ProductID
HAVING SUM(Quantity) <100
--               ProductID    TheSum

--               -----------        ----------

-- 7.    Write a query to list the sum of products with the shelf information in the Production.ProductInventory
--  table and LocationID set to 40 and limit the result to include just 
-- summarized quantities less than 100
SELECT Shelf, ProductID, SUM(Quantity) AS TheSum
FROM Production.ProductInventory
WHERE LocationID = 40
GROUP BY ProductID,Shelf
HAVING SUM(Quantity) <100
--     Shelf      ProductID    TheSum

--     ----------   -----------        -----------

-- 8. Write the query to list the average quantity for products where 
-- column LocationID has the value of 10 from the table Production.ProductInventory table.
SELECT AVG(Quantity) AS AVGQ
FROM Production.ProductInventory p
WHERE p.LocationID = 10

-- 9.    Write query  to see the average quantity  of  products by shelf  from the table Production.ProductInventory
SELECT ProductID, Shelf, AVG(Quantity) AS TheAvg
FROM Production.ProductInventory p
GROUP BY ProductID, Shelf
--     ProductID   Shelf      TheAvg

--     ----------- ---------- -----------

-- 10.  Write query  to see the average quantity  of  products by shelf 
-- excluding rows that has the value of N/A in the column Shelf from the table Production.ProductInventory
SELECT ProductID, Shelf, AVG(Quantity) AS TheAvg
FROM Production.ProductInventory p
WHERE p.Shelf != 'N/A'
GROUP BY ProductID, Shelf

SELECT ProductID, Shelf, AVG(Quantity) AS TheAvg
FROM Production.ProductInventory p
GROUP BY ProductID, Shelf
HAVING p.Shelf != 'N/A'
--     ProductID   Shelf      TheAvg

--     ----------- ---------- -----------

-- 11.  List the members (rows) and average list price in the Production.Product table. 
-- This should be grouped independently over the Color and the Class column.
--  Exclude the rows where Color or Class are null.
SELECT Color, Class, COUNT(*) AS TheCount, AVG(ListPrice) AS AvgPrice
FROM Production.Product p
WHERE Color IS NOT NULL 
AND Class IS NOT NULL
GROUP BY Color, Class


--     Color                        Class              TheCount          AvgPrice

--     -------------- - -----    -----------            ---------------------

-- Joins:

-- 12.   Write a query that lists the country and province names from 
-- person.CountryRegion and person. StateProvince tables. 
-- Join them and produce a result set similar to the following.
SELECT c.Name AS Country, s.Name AS Province
FROM Person.CountryRegion c
JOIN Person.StateProvince s
ON c.CountryRegionCode = s.CountryRegionCode
--     Country                        Province

--     ---------                          ----------------------

-- 13.  Write a query that lists the country and province names from person. CountryRegion 
-- and person. StateProvince tables and 
-- list the countries filter them by Germany and Canada. Join them and produce a result set similar to the following.
SELECT c.Name AS Country, s.Name AS Province
FROM Person.CountryRegion c
JOIN Person.StateProvince s
ON c.CountryRegionCode = s.CountryRegionCode
WHERE c.Name = 'Germany' OR c.Name = 'Canada'
--     Country                        Province

--     ---------                          ----------------------

--  Using Northwnd Database: (Use aliases for all the Joins)
USE Northwind
GO
SELECT * FROM Orders
-- 14.  List all Products that has been sold at least once in last 25 years.
SELECT p.ProductName, od.ProductID, o.OrderDate
FROM Orders o 
JOIN [Order Details] od 
ON o.OrderID = od.OrderID
JOIN Products p 
ON p.ProductID = od.ProductID


-- 15.  List top 5 locations (Zip Code) where the products sold most.
SELECT DISTINCT TOP 5  o.ShipPostalCode AS ZIPCODE
FROM Orders o 
JOIN [Order Details] od 
ON o.OrderID = od.OrderID
JOIN Products p 
ON p.ProductID = od.ProductID
WHERE o.ShipPostalCode IS NOT NULL

-- 16.  List top 5 locations (Zip Code) where the products sold most in last 25 years.
SELECT DISTINCT TOP 5  o.ShipPostalCode AS ZIPCODE
FROM Orders o 
JOIN [Order Details] od 
ON o.OrderID = od.OrderID
JOIN Products p 
ON p.ProductID = od.ProductID
WHERE o.ShipPostalCode IS NOT NULL

-- 17.   List all city names and number of customers in that city.     
SELECT City, COUNT(*) AS NumberOfCustomers
FROM Customers
Group BY City
-- 18.  List city names which have more than 2 customers, and number of customers in that city
SELECT City, COUNT(*) AS NumberOfCustomers
FROM Customers
Group BY City
HAVING COUNT(*) >2 


-- 19.  List the names of customers who placed orders after 1/1/98 with order date.
SELECT DISTINCT c.ContactName
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderDate > '1998-01-01';

-- 20.  List the names of all customers with most recent order dates
SELECT c.ContactName, MAX(o.OrderDate) AS MostRecentOrderDate
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.ContactName;


-- 21.  Display the names of all customers  along with the  count of products they bought
SELECT C.ContactName,COUNT(od.ProductID) AS ProductCount
FROM Customers c
JOIN Orders o 
ON c.CustomerID = o.CustomerID
JOIN [Order Details] od
ON o.OrderID = od.OrderID
GROUP BY C.ContactName


-- 22.  Display the customer ids who bought more than 100 Products with count of products.
SELECT C.ContactName,COUNT(od.ProductID) AS ProductCount
FROM Customers c
JOIN Orders o 
ON c.CustomerID = o.CustomerID
JOIN [Order Details] od
ON o.OrderID = od.OrderID
GROUP BY C.ContactName
HAVING COUNT(od.ProductID)>100

-- 23.  List all of the possible ways that suppliers can ship their products. Display the results as below
SELECT 
    s.CompanyName AS SupplierCompanyName,
    sh.CompanyName AS ShippingCompanyName
FROM 
    Suppliers s
CROSS JOIN 
    Shippers sh;


--     Supplier Company Name                Shipping Company Name

--     ---------------------------------            ----------------------------------

-- 24.  Display the products order each day. Show Order date and Product Name.
SELECT 
    o.OrderDate,
    p.ProductName
FROM 
    Orders o
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
JOIN 
    Products p ON od.ProductID = p.ProductID
ORDER BY 
    o.OrderDate, p.ProductName;


-- 25.  Displays pairs of employees who have the same job title.
SELECT 
    e1.LastName AS LastName1,
    e1.FirstName AS FirstName1,
    e2.EmployeeID AS EmployeeID2,
    e2.LastName AS LastName2,
    e2.FirstName AS FirstName2,
    e1.Title AS JobTitle
FROM 
    Employees e1
JOIN 
    Employees e2 ON e1.EmployeeID < e2.EmployeeID
WHERE 
    e1.Title = e2.Title


-- 26.  Display all the Managers who have more than 2 employees reporting to them.
SELECT 
    e.EmployeeID,
    e.FirstName,
    e.LastName
FROM 
    Employees e
WHERE 
    e.EmployeeID IN (
        SELECT 
            ReportsTo
        FROM 
            Employees
        GROUP BY 
            ReportsTo
        HAVING 
            COUNT(*) > 2
    );

-- 27.  Display the customers and suppliers by city. The results should have the following columns

-- City

-- Name

-- Contact Name,

-- Type (Customer or Supplier)
SELECT 
    City,
    CompanyName AS Name,
    ContactName AS ContactName,
    'Customer' AS Type
FROM 
    Customers
UNION ALL
SELECT 
    City,
    CompanyName AS Name,
    ContactName AS ContactName,
    'Supplier' AS Type
FROM 
    Suppliers
ORDER BY 
    City

