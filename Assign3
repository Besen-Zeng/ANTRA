-- All scenarios are based on Database NORTHWIND.
SELECT * FROM Customers
SELECT * FROM Employees
-- 1.      List all cities that have both Employees and Customers.
SELECT DISTINCT City
FROM Employees
WHERE EXISTS (
    SELECT 1
    FROM Customers
    WHERE Customers.City = Employees.City
);

-- 2.      List all cities that have Customers but no Employee.


-- a.      Use sub-query
SELECT DISTINCT City 
FROM Customers 
WHERE NOT EXISTS(
    SELECT 1 
    FROM Employees 
    WHERE Customers.City = Employees.City
)

-- b.      Do not use sub-query
SELECT DISTINCT c.City 
FROM Customers c
LEFT Join Employees e ON c.City = e.City
WHERE e.City IS NULL
-- 3.      List all products and their total order quantities throughout all orders.
SELECT 
    od.ProductID,
    p.ProductName,
    SUM(od.Quantity) AS TotalOrderQuantity
FROM 
    [Order Details] od
JOIN 
    Products p ON od.ProductID = p.ProductID
GROUP BY 
    od.ProductID, p.ProductName;


-- 4.      List all Customer Cities and total products ordered by that city.
SELECT 
    c.City,
    COUNT(od.ProductID) AS TotalProductsOrdered
FROM 
    Customers c
JOIN 
    Orders o ON c.CustomerID = o.CustomerID
JOIN 
    [Order Details] od ON o.OrderID = od.OrderID
GROUP BY 
    c.City;


-- 5.      List all Customer Cities that have at least two customers.

-- a.      Use union
SELECT City
FROM Customers
GROUP BY City
HAVING COUNT(CustomerID) >= 2

UNION

SELECT City
FROM Customers
GROUP BY City
HAVING COUNT(CustomerID) >= 2;

-- b.      Use sub-query and no union
SELECT DISTINCT City  
FROM Customers c 
WHERE City IN  (
    SELECT City  
    FROM Customers   
    GROUP BY City
    HAVING COUNT(CustomerID)>2

)
-- 6.      List all Customer Cities that have ordered at least two different kinds of products.
SELECT DISTINCT City
FROM Customers
WHERE City IN (
    SELECT c.City
    FROM Customers c
    JOIN Orders o ON o.CustomerID = c.CustomerID
    JOIN [Order Details] od ON od.OrderID = o.OrderID
    GROUP BY c.City
    HAVING COUNT(DISTINCT od.ProductID) >= 2
);


-- 7.      List all Customers who have ordered products, but have the ‘ship city’ on the order different from their own customer cities.
SELECT DISTINCT c.CustomerID, c.ContactName
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE c.City <> o.ShipCity;

-- 8.      List 5 most popular products, their average price, and the customer city that ordered most quantity of it.
SELECT TOP 5
    p.ProductID,
    p.ProductName,
    AVG(od.UnitPrice) AS AveragePrice,
    c.City AS MostOrderedCity
FROM 
    Products p
JOIN 
    [Order Details] od ON p.ProductID = od.ProductID
JOIN 
    Orders o ON od.OrderID = o.OrderID
JOIN Customers c ON o.CustomerID = c.CustomerID
GROUP BY 
    p.ProductID, p.ProductName, c.City
ORDER BY 
    SUM(od.Quantity) DESC;

-- 9.      List all cities that have never ordered something but we have employees there.


-- a.      Use sub-query
SELECT DISTINCT City 
FROM Employees
WHERE CITY NOT In (
    SELECT DISTINCT City  
    FROM Customers c 
    JOIN Orders o ON c.CustomerID = o.CustomerID
)
-- b.      Do not use sub-query
SELECT DISTINCT e.City
FROM Employees e
LEFT JOIN Customers c ON e.City = c.City
LEFT Join Orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderID IS NULL;
-- 10.  List one city, if exists, that is the city from where the employee sold most orders (not the product quantity) is, and also the city of most total quantity of products ordered from. (tip: join  sub-query)

-- 11. How do you remove the duplicates record of a table?
USE DELETE and Common Table  Expression 
WITH DuplicateCTE AS (
    SELECT *,
           ROW_NUMBER() OVER (PARTITION BY <columns> ORDER BY (SELECT NULL)) AS RowNumber
    FROM YourTable
)
DELETE FROM DuplicateCTE
WHERE RowNumber > 1;
